/**
 * @author    Labs64 <netlicensing@labs64.com>
 * @license   Apache-2.0
 * @link      https://netlicensing.io
 * @copyright 2017 Labs64 NetLicensing
 */
// entity factory
import defineEntity from '@/entities/defineEntity';

// types
import { PaymentMethodEnum } from '@/types/constants/PaymentMethodEnum';
import { TransactionSource } from '@/types/constants/TransactionSource';
import { TransactionStatus } from '@/types/constants/TransactionStatus';
import { LicenseTransactionJoin } from '@/types/entities/LicenseTransactionJoin';
import { TransactionMethods, TransactionProps, Transaction as ITransaction } from '@/types/entities/Transaction';

// utils
import { set, get } from '@/utils/helpers';
import serialize from '@/utils/serialize';

/**
 * Transaction entity used internally by NetLicensing.
 *
 * Properties visible via NetLicensing API:
 *
 * Unique number (across all products of a vendor) that identifies the transaction. This number is
 * always generated by NetLicensing.
 * @property string number
 *
 * always true for transactions
 * @property boolean active
 *
 * Status of transaction. "CANCELLED", "CLOSED", "PENDING".
 * @property string status
 *
 * "SHOP". AUTO transaction for internal use only.
 * @property string source
 *
 * grand total for SHOP transaction (see source).
 * @property number grandTotal
 *
 * discount for SHOP transaction (see source).
 * @property number discount
 *
 * specifies currency for money fields (grandTotal and discount). Check data types to discover which
 * @property string currency
 *
 * Date created. Optional.
 * @property string dateCreated
 *
 * Date closed. Optional.
 * @property string dateClosed
 */

const Transaction = function <T extends object>(
  properties: TransactionProps<T> = {} as TransactionProps<T>,
): ITransaction<T> {
  const props: TransactionProps = { ...properties };

  const methods: TransactionMethods = {
    setActive(active: boolean) {
      set(props, 'active', active);
    },

    getActive<D = undefined>(def?: D): boolean | D {
      return get(props, 'active', def) as boolean | D;
    },

    setNumber(number: string): void {
      set(props, 'number', number);
    },

    getNumber<D = undefined>(def?: D): string | D {
      return get(props, 'number', def) as string | D;
    },

    setStatus(status: TransactionStatus): void {
      set(props, 'status', status);
    },

    getStatus<D = undefined>(def?: D): TransactionStatus | D {
      return get(props, 'status', def) as TransactionStatus | D;
    },

    setSource(source: TransactionSource): void {
      set(props, 'source', source);
    },
    getSource<D = undefined>(def?: D): TransactionSource | D {
      return get(props, 'source', def) as TransactionSource | D;
    },
    setGrandTotal(grandTotal: number): void {
      set(props, 'grandTotal', grandTotal);
    },
    getGrandTotal<D = undefined>(def?: D): number | D {
      return get(props, 'grandTotal', def) as number | D;
    },

    setDiscount(discount: number): void {
      set(props, 'discount', discount);
    },

    getDiscount<D = undefined>(def?: D): number | D {
      return get(props, 'discount', def) as number | D;
    },

    setCurrency(currency: string): void {
      set(props, 'currency', currency);
    },

    getCurrency<D = undefined>(def?: D): string | D {
      return get(props, 'currency', def) as string | D;
    },

    setDateCreated(dateCreated: Date): void {
      set(props, 'dateCreated', dateCreated);
    },

    getDateCreated<D = undefined>(def?: D): Date | D {
      return get(props, 'dateCreated', def) as Date | D;
    },

    setDateClosed(dateCreated: Date): void {
      set(props, 'dateClosed', dateCreated);
    },

    getDateClosed<D = undefined>(def?: D): Date | D {
      return get(props, 'dateClosed', def) as Date | D;
    },

    setPaymentMethod(paymentMethod: PaymentMethodEnum): void {
      set(props, 'paymentMethod', paymentMethod);
    },

    getPaymentMethod<D = undefined>(def?: D): PaymentMethodEnum | D {
      return get(props, 'paymentMethod', def) as PaymentMethodEnum | D;
    },

    setLicenseTransactionJoins(joins: LicenseTransactionJoin[]): void {
      set(props, 'licenseTransactionJoins', joins);
    },

    getLicenseTransactionJoins<D = undefined>(def?: D): LicenseTransactionJoin[] | D {
      return get(props, 'licenseTransactionJoins', def) as LicenseTransactionJoin[] | D;
    },

    serialize() {
      return serialize(props, { ignore: ['licenseTransactionJoins', 'inUse'] });
    },
  };

  return defineEntity(props as TransactionProps<T>, methods, Transaction);
};

export default Transaction;
